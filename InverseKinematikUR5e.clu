// variable assignments:
/*p_x = 0.2401191099971;
p_y = -0.399999869993223;
p_z = 0.489999999997885;
ae_1 = 0;
ae_2 = 0;
ae_3 = -1;
se_1 = 0;
se_2 = 1;
se_3 = 0;*/

// dh parameters UR5e
a2 = -0.425;
a3 = -0.3922;
d1 = 0.1625;
d4 = 0.1333;
d5 = 0.0997;
d6 = 0.0996;

// code to optimize:
// position of the end-effector and joint 5
//?P_e = (p_x * e1 + p_y * e2 + p_z * e3) + (1 / 2 * (p_x * p_x + p_y * p_y + p_z * p_z)) * einf + e0;
?P_e = createPoint(p_x, p_y, p_z);
?P_5 = createPoint(p_x - d6 * ae_1, p_y - d6 * ae_2, p_z - d6 * ae_3);

// sphere around P_5
?S_c = P_5 - (1/ 2 * d4 * d4 * einf);
// sphere around the origin
?K_0 = e0 + (S_c . e0) * einf;
// intersection of S_c and K_0;
?C_5k = S_c ^ K_0;
// intersection of C_5k and the horizontal plane through P_5
?Q_c = Dual(C_5k . (P_5 ^ e1 ^ e2 ^ einf));
// point P_c with an offset d4 from P_5
?P_c = ExtractFirstPoint(Q_c);
// plane through joints 1, 2, 3 and 4
?PI_c = e0 ^ e3 ^ P_c ^ einf;
PI_c_IPNS = Dual(PI_c);


// finding P_3 and P_4
// plane parallel to PI_c that contains P_4 and P_5
?PI_c_parallel = Dual(PI_c) + (P_5 . Dual(PI_c)) * einf; // eq. 47
?PI_56_orthogonal = Dual(P_5 ^ P_e) ^ einf; // eq. 48 l.1
PI_56_orthogonal_IPNS = Dual(PI_56_orthogonal);

?n_56_orthogonal = -((PI_56_orthogonal . e0)  . einf) / abs((PI_56_orthogonal . e0) . einf); // eq. 48, l. 2
?PI_c_orthogonal = P_5 ^ n_56_orthogonal ^ einf;
PI_c_orthogonal_IPNS = Dual(PI_c_orthogonal);
?L_45 = PI_c_parallel ^ Dual(PI_c_orthogonal);

?S_5 = P_5 - (1 / 2 * d5 * d5 * einf);
?Q_4 = Dual(L_45 . Dual(S_5));
?P_4 = ExtractFirstPoint(Q_4);
//?P_4 = (Q_4 + sqrt(Q_4 . Q_4)) / (-einf . Q_4);

// point P3
?S_4 = P_4 + (1 / 2 * d4 * d4 * einf);
?L_34 = P_4 ^ Dual(PI_c) ^ einf;
L_34_IPNS = Dual(L_34);
?Q_3 = Dual(Dual(S_4) . Dual(L_34));
?P_3 = ExtractSecondPoint(Q_3);

// finding P1 and P2
?P_1 = createPoint(0, 0, d1);
?S_1 = P_1 - (1 / 2 * a2 * a2 * einf);
?S_3 = P_3 + (1 / 2 * a3 * a3 * einf);
?C_2 = S_1 ^ S_3;
?Q_2 = Dual(Dual(C_2) . Dual(PI_c));
?P_2 = ExtractSecondPoint(Q_2);

// finding the joint angles
?L_01 = e0 ^ e3 ^ einf;
L_01_IPNS = Dual(L_01);
?L_12 = P_1 ^ P_2 ^ einf;
L_12_IPNS = Dual(L_12);
?L_23 = P_2 ^ P_3 ^ einf;
L_23_IPNS = Dual(L_23);

?P_0 = createPoint(0,0,0);
