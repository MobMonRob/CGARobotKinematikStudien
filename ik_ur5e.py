import math
import numpy as np
from csv import reader

def inverse_kinematics_ur5e(p_x, p_y, p_z):
	P_e = np.zeros(32)
	P_e[3] = (-p_z) # e3
	P_5 = np.zeros(32)
	P_5[3] = (-p_z) + -0.0996 # e3
	P_5[4] = (p_x * p_x + p_y * p_y + ((-p_z) + -0.0996) * ((-p_z) + -0.0996)) / 2.0 # einf
	S_c = np.zeros(32)
	S_c[4] = P_5[4] - 0.008884445 # einf
	K_0 = np.zeros(32)
	K_0[4] = (-S_c[4]) # einf
	C_5k = np.zeros(32)
	C_5k[8] = p_x * K_0[4] # e1 ^ einf
	C_5k[11] = p_y * K_0[4] # e2 ^ einf
	C_5k[15] = S_c[4] + (-K_0[4]) # einf ^ e0
	Q_c = np.zeros(32)
	Q_c[21] = p_x * P_5[3] # e1 ^ (einf ^ e0)
	Q_c[24] = p_y * P_5[3] # e2 ^ (einf ^ e0)
	Q_c[25] = P_5[3] * P_5[3] + (-C_5k[15]) # e3 ^ (einf ^ e0)
	macro_ExtractFirstPoint_dPP = np.zeros(32)
	macro_ExtractFirstPoint_dPP[6] = (-Q_c[25]) # e1 ^ e2
	macro_ExtractFirstPoint_dPP[8] = (-C_5k[11]) # e1 ^ einf
	macro_ExtractFirstPoint_dPP[10] = (-Q_c[21]) # e2 ^ e3
	macro_ExtractFirstPoint_dPP[12] = (-p_x) # e2 ^ e0
	P_c = np.zeros(32)
	P_c[1] = math.sqrt(abs(C_5k[8] * p_x + p_x * C_5k[8] + Q_c[21] * Q_c[21] + C_5k[11] * p_y + p_y * C_5k[11] + Q_c[24] * Q_c[24] + Q_c[25] * Q_c[25])) * p_y / (p_y * p_y + macro_ExtractFirstPoint_dPP[12] * macro_ExtractFirstPoint_dPP[12]) + macro_ExtractFirstPoint_dPP[6] * macro_ExtractFirstPoint_dPP[12] / (p_y * p_y + macro_ExtractFirstPoint_dPP[12] * macro_ExtractFirstPoint_dPP[12]) # e1
	P_c[2] = math.sqrt(abs(C_5k[8] * p_x + p_x * C_5k[8] + Q_c[21] * Q_c[21] + C_5k[11] * p_y + p_y * C_5k[11] + Q_c[24] * Q_c[24] + Q_c[25] * Q_c[25])) * macro_ExtractFirstPoint_dPP[12] / (p_y * p_y + macro_ExtractFirstPoint_dPP[12] * macro_ExtractFirstPoint_dPP[12]) + (-(macro_ExtractFirstPoint_dPP[6] * p_y / (p_y * p_y + macro_ExtractFirstPoint_dPP[12] * macro_ExtractFirstPoint_dPP[12]))) # e2
	P_c[3] = (-(Q_c[24] * p_y / (p_y * p_y + macro_ExtractFirstPoint_dPP[12] * macro_ExtractFirstPoint_dPP[12]))) + (-(macro_ExtractFirstPoint_dPP[10] * macro_ExtractFirstPoint_dPP[12] / (p_y * p_y + macro_ExtractFirstPoint_dPP[12] * macro_ExtractFirstPoint_dPP[12]))) # e3
	P_c[4] = (-(macro_ExtractFirstPoint_dPP[8] * p_y / (p_y * p_y + macro_ExtractFirstPoint_dPP[12] * macro_ExtractFirstPoint_dPP[12]))) + (-(C_5k[8] * macro_ExtractFirstPoint_dPP[12] / (p_y * p_y + macro_ExtractFirstPoint_dPP[12] * macro_ExtractFirstPoint_dPP[12]))) # einf
	P_c[5] = (-(p_y * p_y / (p_y * p_y + macro_ExtractFirstPoint_dPP[12] * macro_ExtractFirstPoint_dPP[12]))) + (-(macro_ExtractFirstPoint_dPP[12] * macro_ExtractFirstPoint_dPP[12] / (p_y * p_y + macro_ExtractFirstPoint_dPP[12] * macro_ExtractFirstPoint_dPP[12]))) # e0
	P_c[16] = (-(Q_c[24] * macro_ExtractFirstPoint_dPP[12] / (p_y * p_y + macro_ExtractFirstPoint_dPP[12] * macro_ExtractFirstPoint_dPP[12]))) + macro_ExtractFirstPoint_dPP[10] * p_y / (p_y * p_y + macro_ExtractFirstPoint_dPP[12] * macro_ExtractFirstPoint_dPP[12]) # e1 ^ (e2 ^ e3)
	P_c[17] = (-(macro_ExtractFirstPoint_dPP[8] * macro_ExtractFirstPoint_dPP[12] / (p_y * p_y + macro_ExtractFirstPoint_dPP[12] * macro_ExtractFirstPoint_dPP[12]))) + C_5k[8] * p_y / (p_y * p_y + macro_ExtractFirstPoint_dPP[12] * macro_ExtractFirstPoint_dPP[12]) # e1 ^ (e2 ^ einf)
	P_c[18] = (-(p_y * macro_ExtractFirstPoint_dPP[12] / (p_y * p_y + macro_ExtractFirstPoint_dPP[12] * macro_ExtractFirstPoint_dPP[12]))) + macro_ExtractFirstPoint_dPP[12] * p_y / (p_y * p_y + macro_ExtractFirstPoint_dPP[12] * macro_ExtractFirstPoint_dPP[12]) # e1 ^ (e2 ^ e0)
	PI_c = np.zeros(32)
	PI_c[1] = (-P_c[2]) # e1
	PI_c_parallel = np.zeros(32)
	PI_c_parallel[4] = p_x * PI_c[1] + p_y * P_c[1] # einf
	PI_56_orthogonal = np.zeros(32)
	PI_56_orthogonal[1] = p_x + (-p_x) # e1
	PI_56_orthogonal[2] = p_y + (-p_y) # e2
	PI_56_orthogonal[3] = P_5[3] + (-P_e[3]) # e3
	n_56_orthogonal = np.zeros(32)
	n_56_orthogonal[6] = (-PI_56_orthogonal[3]) * math.sqrt(abs((-(PI_56_orthogonal[3] * (-PI_56_orthogonal[3]))) + (-((-PI_56_orthogonal[2]) * PI_56_orthogonal[2])) + (-(PI_56_orthogonal[1] * (-PI_56_orthogonal[1]))))) / math.sqrt(abs(((-(PI_56_orthogonal[3] * (-PI_56_orthogonal[3]))) + (-((-PI_56_orthogonal[2]) * PI_56_orthogonal[2])) + (-(PI_56_orthogonal[1] * (-PI_56_orthogonal[1])))) * ((-(PI_56_orthogonal[3] * (-PI_56_orthogonal[3]))) + (-((-PI_56_orthogonal[2]) * PI_56_orthogonal[2])) + (-(PI_56_orthogonal[1] * (-PI_56_orthogonal[1])))))) # e1 ^ e2
	n_56_orthogonal[7] = PI_56_orthogonal[2] * math.sqrt(abs((-(PI_56_orthogonal[3] * (-PI_56_orthogonal[3]))) + (-((-PI_56_orthogonal[2]) * PI_56_orthogonal[2])) + (-(PI_56_orthogonal[1] * (-PI_56_orthogonal[1]))))) / math.sqrt(abs(((-(PI_56_orthogonal[3] * (-PI_56_orthogonal[3]))) + (-((-PI_56_orthogonal[2]) * PI_56_orthogonal[2])) + (-(PI_56_orthogonal[1] * (-PI_56_orthogonal[1])))) * ((-(PI_56_orthogonal[3] * (-PI_56_orthogonal[3]))) + (-((-PI_56_orthogonal[2]) * PI_56_orthogonal[2])) + (-(PI_56_orthogonal[1] * (-PI_56_orthogonal[1])))))) # e1 ^ e3
	n_56_orthogonal[10] = (-PI_56_orthogonal[1]) * math.sqrt(abs((-(PI_56_orthogonal[3] * (-PI_56_orthogonal[3]))) + (-((-PI_56_orthogonal[2]) * PI_56_orthogonal[2])) + (-(PI_56_orthogonal[1] * (-PI_56_orthogonal[1]))))) / math.sqrt(abs(((-(PI_56_orthogonal[3] * (-PI_56_orthogonal[3]))) + (-((-PI_56_orthogonal[2]) * PI_56_orthogonal[2])) + (-(PI_56_orthogonal[1] * (-PI_56_orthogonal[1])))) * ((-(PI_56_orthogonal[3] * (-PI_56_orthogonal[3]))) + (-((-PI_56_orthogonal[2]) * PI_56_orthogonal[2])) + (-(PI_56_orthogonal[1] * (-PI_56_orthogonal[1])))))) # e2 ^ e3
	PI_c_orthogonal = np.zeros(32)
	PI_c_orthogonal[1] = (-n_56_orthogonal[10]) # e1
	PI_c_orthogonal[3] = (-n_56_orthogonal[6]) # e3
	PI_c_orthogonal[4] = (-(p_x * n_56_orthogonal[10] + (-(p_y * n_56_orthogonal[7])) + P_5[3] * n_56_orthogonal[6])) # einf
	L_45 = np.zeros(32)
	L_45[6] = PI_c[1] * n_56_orthogonal[7] + (-(P_c[1] * PI_c_orthogonal[1])) # e1 ^ e2
	L_45[7] = PI_c[1] * PI_c_orthogonal[3] # e1 ^ e3
	L_45[8] = PI_c[1] * PI_c_orthogonal[4] + (-(PI_c_parallel[4] * PI_c_orthogonal[1])) # e1 ^ einf
	L_45[10] = P_c[1] * PI_c_orthogonal[3] # e2 ^ e3
	L_45[11] = P_c[1] * PI_c_orthogonal[4] + (-(PI_c_parallel[4] * n_56_orthogonal[7])) # e2 ^ einf
	L_45[13] = (-(PI_c_parallel[4] * PI_c_orthogonal[3])) # e3 ^ einf
	S_5 = np.zeros(32)
	S_5[4] = P_5[4] - 0.004970044999999999 # einf
	Q_4 = np.zeros(32)
	Q_4[16] = (-((-(L_45[6] * (-P_5[3]))) + (-(L_45[7] * p_y)) + (-(L_45[10] * (-p_x))))) # e1 ^ (e2 ^ e3)
	Q_4[17] = (-(L_45[6] * S_5[4])) + L_45[8] * p_y + L_45[11] * (-p_x) # e1 ^ (e2 ^ einf)
	Q_4[18] = (-L_45[6]) # e1 ^ (e2 ^ e0)
	Q_4[19] = (-(L_45[7] * S_5[4] + L_45[8] * (-P_5[3]) + (-(L_45[13] * (-p_x))))) # e1 ^ (e3 ^ einf)
	Q_4[20] = (-L_45[7]) # e1 ^ (e3 ^ e0)
	Q_4[21] = (-L_45[8]) # e1 ^ (einf ^ e0)
	Q_4[22] = (-(L_45[10] * S_5[4])) + (-(L_45[11] * (-P_5[3]))) + (-(L_45[13] * p_y)) # e2 ^ (e3 ^ einf)
	Q_4[23] = (-L_45[10]) # e2 ^ (e3 ^ e0)
	Q_4[24] = (-L_45[11]) # e2 ^ (einf ^ e0)
	Q_4[25] = (-L_45[13]) # e3 ^ (einf ^ e0)
	macro_ExtractFirstPoint_dPP1 = np.zeros(32)
	macro_ExtractFirstPoint_dPP1[6] = (-Q_4[25]) # e1 ^ e2
	macro_ExtractFirstPoint_dPP1[8] = (-Q_4[22]) # e1 ^ einf
	macro_ExtractFirstPoint_dPP1[10] = (-Q_4[21]) # e2 ^ e3
	macro_ExtractFirstPoint_dPP1[12] = (-Q_4[20]) # e2 ^ e0
	macro_ExtractFirstPoint_dPP1[13] = (-Q_4[17]) # e3 ^ einf
	P_4 = np.zeros(32)
	P_4[1] = math.sqrt(abs((-(Q_4[16] * Q_4[16])) + Q_4[17] * Q_4[18] + Q_4[18] * Q_4[17] + Q_4[19] * Q_4[20] + Q_4[20] * Q_4[19] + Q_4[21] * Q_4[21] + Q_4[22] * Q_4[23] + Q_4[23] * Q_4[22] + Q_4[24] * Q_4[24] + Q_4[25] * Q_4[25])) * Q_4[23] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]) + macro_ExtractFirstPoint_dPP1[6] * macro_ExtractFirstPoint_dPP1[12] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]) + Q_4[24] * Q_4[18] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]) + (-(Q_4[23] * Q_4[16] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]))) # e1
	P_4[2] = math.sqrt(abs((-(Q_4[16] * Q_4[16])) + Q_4[17] * Q_4[18] + Q_4[18] * Q_4[17] + Q_4[19] * Q_4[20] + Q_4[20] * Q_4[19] + Q_4[21] * Q_4[21] + Q_4[22] * Q_4[23] + Q_4[23] * Q_4[22] + Q_4[24] * Q_4[24] + Q_4[25] * Q_4[25])) * macro_ExtractFirstPoint_dPP1[12] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]) + (-(macro_ExtractFirstPoint_dPP1[6] * Q_4[23] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]))) + macro_ExtractFirstPoint_dPP1[10] * Q_4[18] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]) + (-(macro_ExtractFirstPoint_dPP1[12] * Q_4[16] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]))) # e2
	P_4[3] = math.sqrt(abs((-(Q_4[16] * Q_4[16])) + Q_4[17] * Q_4[18] + Q_4[18] * Q_4[17] + Q_4[19] * Q_4[20] + Q_4[20] * Q_4[19] + Q_4[21] * Q_4[21] + Q_4[22] * Q_4[23] + Q_4[23] * Q_4[22] + Q_4[24] * Q_4[24] + Q_4[25] * Q_4[25])) * Q_4[18] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]) + (-(Q_4[24] * Q_4[23] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]))) + (-(macro_ExtractFirstPoint_dPP1[10] * macro_ExtractFirstPoint_dPP1[12] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]))) + (-(Q_4[18] * Q_4[16] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]))) # e3
	P_4[4] = math.sqrt(abs((-(Q_4[16] * Q_4[16])) + Q_4[17] * Q_4[18] + Q_4[18] * Q_4[17] + Q_4[19] * Q_4[20] + Q_4[20] * Q_4[19] + Q_4[21] * Q_4[21] + Q_4[22] * Q_4[23] + Q_4[23] * Q_4[22] + Q_4[24] * Q_4[24] + Q_4[25] * Q_4[25])) * Q_4[16] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]) + (-(macro_ExtractFirstPoint_dPP1[8] * Q_4[23] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]))) + (-(Q_4[19] * macro_ExtractFirstPoint_dPP1[12] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]))) + (-(macro_ExtractFirstPoint_dPP1[13] * Q_4[18] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]))) + (-(Q_4[16] * Q_4[16] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]))) # einf
	P_4[5] = (-(Q_4[23] * Q_4[23] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]))) + (-(macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]))) + (-(Q_4[18] * Q_4[18] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]))) # e0
	P_4[18] = (-(Q_4[23] * macro_ExtractFirstPoint_dPP1[12] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]))) + macro_ExtractFirstPoint_dPP1[12] * Q_4[23] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]) # e1 ^ (e2 ^ e0)
	P_4[20] = (-(Q_4[23] * Q_4[18] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]))) + Q_4[18] * Q_4[23] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]) # e1 ^ (e3 ^ e0)
	P_4[21] = (-(Q_4[23] * Q_4[16] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]))) + Q_4[16] * Q_4[23] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]) # e1 ^ (einf ^ e0)
	P_4[23] = (-(macro_ExtractFirstPoint_dPP1[12] * Q_4[18] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]))) + Q_4[18] * macro_ExtractFirstPoint_dPP1[12] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]) # e2 ^ (e3 ^ e0)
	P_4[24] = (-(macro_ExtractFirstPoint_dPP1[12] * Q_4[16] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]))) + Q_4[16] * macro_ExtractFirstPoint_dPP1[12] / (Q_4[23] * Q_4[23] + macro_ExtractFirstPoint_dPP1[12] * macro_ExtractFirstPoint_dPP1[12] + Q_4[18] * Q_4[18]) # e2 ^ (einf ^ e0)
	S_4 = np.zeros(32)
	S_4[4] = P_4[4] + 0.008884445 # einf
	L_34 = np.zeros(32)
	L_34[7] = P_4[5] * P_c[1] # e1 ^ e3
	L_34[8] = P_4[3] * P_c[1] # e1 ^ einf
	L_34[10] = (-(P_4[5] * PI_c[1])) # e2 ^ e3
	L_34[11] = (-(P_4[3] * PI_c[1])) # e2 ^ einf
	L_34[13] = (-(P_4[1] * P_c[1] + (-(P_4[2] * PI_c[1])))) # e3 ^ einf
	Q_3 = np.zeros(32)
	Q_3[16] = (-((-(P_4[2] * L_34[7])) + (-((-P_4[1]) * L_34[10])))) # e1 ^ (e2 ^ e3)
	Q_3[17] = P_4[2] * L_34[8] + (-P_4[1]) * L_34[11] # e1 ^ (e2 ^ einf)
	Q_3[19] = (-(S_4[4] * L_34[7] + (-P_4[3]) * L_34[8] + (-((-P_4[1]) * L_34[13])))) # e1 ^ (e3 ^ einf)
	Q_3[20] = (-P_4[5]) * L_34[7] # e1 ^ (e3 ^ e0)
	Q_3[21] = (-P_4[5]) * L_34[8] # e1 ^ (einf ^ e0)
	Q_3[22] = (-(S_4[4] * L_34[10])) + (-((-P_4[3]) * L_34[11])) + (-(P_4[2] * L_34[13])) # e2 ^ (e3 ^ einf)
	Q_3[23] = (-P_4[5]) * L_34[10] # e2 ^ (e3 ^ e0)
	Q_3[24] = (-P_4[5]) * L_34[11] # e2 ^ (einf ^ e0)
	Q_3[25] = (-P_4[5]) * L_34[13] # e3 ^ (einf ^ e0)
	Q_3[31] = (-((-(P_4[24] * L_34[7])) + P_4[23] * L_34[8] + (-((-P_4[21]) * L_34[10])) + (-P_4[20]) * L_34[11] + P_4[18] * L_34[13])) # e1 ^ (e2 ^ (e3 ^ (einf ^ e0)))
	macro_ExtractFirstPoint_dPP2 = np.zeros(32)
	macro_ExtractFirstPoint_dPP2[6] = (-Q_3[25]) # e1 ^ e2
	macro_ExtractFirstPoint_dPP2[8] = (-Q_3[22]) # e1 ^ einf
	macro_ExtractFirstPoint_dPP2[10] = (-Q_3[21]) # e2 ^ e3
	macro_ExtractFirstPoint_dPP2[12] = (-Q_3[20]) # e2 ^ e0
	macro_ExtractFirstPoint_dPP2[13] = (-Q_3[17]) # e3 ^ einf
	P_3 = np.zeros(32)
	P_3[1] = (Q_3[31] + math.sqrt(math.sqrt(abs(((-(Q_3[16] * Q_3[16])) + Q_3[19] * Q_3[20] + Q_3[20] * Q_3[19] + Q_3[21] * Q_3[21] + Q_3[22] * Q_3[23] + Q_3[23] * Q_3[22] + Q_3[24] * Q_3[24] + Q_3[25] * Q_3[25] + (-(Q_3[31] * Q_3[31]))) * ((-(Q_3[16] * Q_3[16])) + Q_3[19] * Q_3[20] + Q_3[20] * Q_3[19] + Q_3[21] * Q_3[21] + Q_3[22] * Q_3[23] + Q_3[23] * Q_3[22] + Q_3[24] * Q_3[24] + Q_3[25] * Q_3[25] + (-(Q_3[31] * Q_3[31]))) + (-((Q_3[25] * Q_3[31] + Q_3[31] * Q_3[25]) * (-(Q_3[25] * Q_3[31] + Q_3[31] * Q_3[25])))) + (-(((-(Q_3[24] * Q_3[31])) + (-(Q_3[31] * Q_3[24]))) * (-((-(Q_3[24] * Q_3[31])) + (-(Q_3[31] * Q_3[24])))))) + (Q_3[22] * Q_3[31] + Q_3[31] * Q_3[22]) * (-((-(Q_3[23] * Q_3[31])) + (-(Q_3[31] * Q_3[23])))) + ((-(Q_3[23] * Q_3[31])) + (-(Q_3[31] * Q_3[23]))) * (-(Q_3[22] * Q_3[31] + Q_3[31] * Q_3[22])) + (-((Q_3[21] * Q_3[31] + Q_3[31] * Q_3[21]) * (-(Q_3[21] * Q_3[31] + Q_3[31] * Q_3[21])))) + ((-(Q_3[19] * Q_3[31])) + (-(Q_3[31] * Q_3[19]))) * (-(Q_3[20] * Q_3[31] + Q_3[31] * Q_3[20])) + (Q_3[20] * Q_3[31] + Q_3[31] * Q_3[20]) * (-((-(Q_3[19] * Q_3[31])) + (-(Q_3[31] * Q_3[19])))) + ((-(Q_3[16] * Q_3[31])) + (-(Q_3[31] * Q_3[16]))) * (-((-(Q_3[16] * Q_3[31])) + (-(Q_3[31] * Q_3[16])))))))) * Q_3[23] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]) + macro_ExtractFirstPoint_dPP2[6] * macro_ExtractFirstPoint_dPP2[12] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]) + (-(Q_3[23] * Q_3[16] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]))) # e1
	P_3[2] = (Q_3[31] + math.sqrt(math.sqrt(abs(((-(Q_3[16] * Q_3[16])) + Q_3[19] * Q_3[20] + Q_3[20] * Q_3[19] + Q_3[21] * Q_3[21] + Q_3[22] * Q_3[23] + Q_3[23] * Q_3[22] + Q_3[24] * Q_3[24] + Q_3[25] * Q_3[25] + (-(Q_3[31] * Q_3[31]))) * ((-(Q_3[16] * Q_3[16])) + Q_3[19] * Q_3[20] + Q_3[20] * Q_3[19] + Q_3[21] * Q_3[21] + Q_3[22] * Q_3[23] + Q_3[23] * Q_3[22] + Q_3[24] * Q_3[24] + Q_3[25] * Q_3[25] + (-(Q_3[31] * Q_3[31]))) + (-((Q_3[25] * Q_3[31] + Q_3[31] * Q_3[25]) * (-(Q_3[25] * Q_3[31] + Q_3[31] * Q_3[25])))) + (-(((-(Q_3[24] * Q_3[31])) + (-(Q_3[31] * Q_3[24]))) * (-((-(Q_3[24] * Q_3[31])) + (-(Q_3[31] * Q_3[24])))))) + (Q_3[22] * Q_3[31] + Q_3[31] * Q_3[22]) * (-((-(Q_3[23] * Q_3[31])) + (-(Q_3[31] * Q_3[23])))) + ((-(Q_3[23] * Q_3[31])) + (-(Q_3[31] * Q_3[23]))) * (-(Q_3[22] * Q_3[31] + Q_3[31] * Q_3[22])) + (-((Q_3[21] * Q_3[31] + Q_3[31] * Q_3[21]) * (-(Q_3[21] * Q_3[31] + Q_3[31] * Q_3[21])))) + ((-(Q_3[19] * Q_3[31])) + (-(Q_3[31] * Q_3[19]))) * (-(Q_3[20] * Q_3[31] + Q_3[31] * Q_3[20])) + (Q_3[20] * Q_3[31] + Q_3[31] * Q_3[20]) * (-((-(Q_3[19] * Q_3[31])) + (-(Q_3[31] * Q_3[19])))) + ((-(Q_3[16] * Q_3[31])) + (-(Q_3[31] * Q_3[16]))) * (-((-(Q_3[16] * Q_3[31])) + (-(Q_3[31] * Q_3[16])))))))) * macro_ExtractFirstPoint_dPP2[12] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]) + (-(macro_ExtractFirstPoint_dPP2[6] * Q_3[23] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]))) + (-(macro_ExtractFirstPoint_dPP2[12] * Q_3[16] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]))) # e2
	P_3[3] = (-(Q_3[24] * Q_3[23] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]))) + (-(macro_ExtractFirstPoint_dPP2[10] * macro_ExtractFirstPoint_dPP2[12] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]))) # e3
	P_3[4] = (Q_3[31] + math.sqrt(math.sqrt(abs(((-(Q_3[16] * Q_3[16])) + Q_3[19] * Q_3[20] + Q_3[20] * Q_3[19] + Q_3[21] * Q_3[21] + Q_3[22] * Q_3[23] + Q_3[23] * Q_3[22] + Q_3[24] * Q_3[24] + Q_3[25] * Q_3[25] + (-(Q_3[31] * Q_3[31]))) * ((-(Q_3[16] * Q_3[16])) + Q_3[19] * Q_3[20] + Q_3[20] * Q_3[19] + Q_3[21] * Q_3[21] + Q_3[22] * Q_3[23] + Q_3[23] * Q_3[22] + Q_3[24] * Q_3[24] + Q_3[25] * Q_3[25] + (-(Q_3[31] * Q_3[31]))) + (-((Q_3[25] * Q_3[31] + Q_3[31] * Q_3[25]) * (-(Q_3[25] * Q_3[31] + Q_3[31] * Q_3[25])))) + (-(((-(Q_3[24] * Q_3[31])) + (-(Q_3[31] * Q_3[24]))) * (-((-(Q_3[24] * Q_3[31])) + (-(Q_3[31] * Q_3[24])))))) + (Q_3[22] * Q_3[31] + Q_3[31] * Q_3[22]) * (-((-(Q_3[23] * Q_3[31])) + (-(Q_3[31] * Q_3[23])))) + ((-(Q_3[23] * Q_3[31])) + (-(Q_3[31] * Q_3[23]))) * (-(Q_3[22] * Q_3[31] + Q_3[31] * Q_3[22])) + (-((Q_3[21] * Q_3[31] + Q_3[31] * Q_3[21]) * (-(Q_3[21] * Q_3[31] + Q_3[31] * Q_3[21])))) + ((-(Q_3[19] * Q_3[31])) + (-(Q_3[31] * Q_3[19]))) * (-(Q_3[20] * Q_3[31] + Q_3[31] * Q_3[20])) + (Q_3[20] * Q_3[31] + Q_3[31] * Q_3[20]) * (-((-(Q_3[19] * Q_3[31])) + (-(Q_3[31] * Q_3[19])))) + ((-(Q_3[16] * Q_3[31])) + (-(Q_3[31] * Q_3[16]))) * (-((-(Q_3[16] * Q_3[31])) + (-(Q_3[31] * Q_3[16])))))))) * Q_3[16] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]) + (-(macro_ExtractFirstPoint_dPP2[8] * Q_3[23] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]))) + (-(Q_3[19] * macro_ExtractFirstPoint_dPP2[12] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]))) + (-(Q_3[16] * Q_3[16] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]))) # einf
	P_3[5] = (-(Q_3[23] * Q_3[23] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]))) + (-(macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]))) # e0
	P_3[16] = (-(Q_3[24] * macro_ExtractFirstPoint_dPP2[12] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]))) + macro_ExtractFirstPoint_dPP2[10] * Q_3[23] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]) # e1 ^ (e2 ^ e3)
	P_3[18] = (-(Q_3[23] * macro_ExtractFirstPoint_dPP2[12] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]))) + macro_ExtractFirstPoint_dPP2[12] * Q_3[23] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]) # e1 ^ (e2 ^ e0)
	P_3[19] = Q_3[24] * Q_3[16] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]) + macro_ExtractFirstPoint_dPP2[13] * Q_3[23] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]) # e1 ^ (e3 ^ einf)
	P_3[21] = (-(Q_3[23] * Q_3[16] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]))) + Q_3[16] * Q_3[23] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]) # e1 ^ (einf ^ e0)
	P_3[22] = macro_ExtractFirstPoint_dPP2[10] * Q_3[16] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]) + macro_ExtractFirstPoint_dPP2[13] * macro_ExtractFirstPoint_dPP2[12] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]) # e2 ^ (e3 ^ einf)
	P_3[24] = (-(macro_ExtractFirstPoint_dPP2[12] * Q_3[16] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]))) + Q_3[16] * macro_ExtractFirstPoint_dPP2[12] / (Q_3[23] * Q_3[23] + macro_ExtractFirstPoint_dPP2[12] * macro_ExtractFirstPoint_dPP2[12]) # e2 ^ (einf ^ e0)
	S_3 = np.zeros(32)
	S_3[4] = P_3[4] + 0.07691042 # einf
	C_2 = np.zeros(32)
	C_2[7] = (-(-0.1625 * P_3[1])) # e1 ^ e3
	C_2[8] = (-(-0.077109375 * P_3[1])) # e1 ^ einf
	C_2[9] = (-P_3[1]) # e1 ^ e0
	C_2[10] = (-(-0.1625 * P_3[2])) # e2 ^ e3
	C_2[11] = (-(-0.077109375 * P_3[2])) # e2 ^ einf
	C_2[12] = (-P_3[2]) # e2 ^ e0
	C_2[13] = -0.1625 * S_3[4] + (-(-0.077109375 * P_3[3])) # e3 ^ einf
	C_2[14] = -0.1625 * P_3[5] + (-P_3[3]) # e3 ^ e0
	C_2[15] = -0.077109375 * P_3[5] + (-S_3[4]) # einf ^ e0
	C_2[29] = (-(-0.1625 * P_3[21])) + (-P_3[19]) # e1 ^ (e3 ^ (einf ^ e0))
	C_2[30] = (-(-0.1625 * P_3[24])) + (-P_3[22]) # e2 ^ (e3 ^ (einf ^ e0))
	Q_2 = np.zeros(32)
	Q_2[16] = (-(C_2[10] * PI_c[1] + (-C_2[7]) * P_c[1])) # e1 ^ (e2 ^ e3)
	Q_2[17] = (-C_2[11]) * PI_c[1] + C_2[8] * P_c[1] # e1 ^ (e2 ^ einf)
	Q_2[18] = (-(C_2[12] * PI_c[1] + (-C_2[9]) * P_c[1])) # e1 ^ (e2 ^ e0)
	Q_2[19] = (-(C_2[13] * PI_c[1])) # e1 ^ (e3 ^ einf)
	Q_2[20] = (-C_2[14]) * PI_c[1] # e1 ^ (e3 ^ e0)
	Q_2[21] = (-C_2[15]) * PI_c[1] # e1 ^ (einf ^ e0)
	Q_2[22] = (-(C_2[13] * P_c[1])) # e2 ^ (e3 ^ einf)
	Q_2[23] = (-C_2[14]) * P_c[1] # e2 ^ (e3 ^ e0)
	Q_2[24] = (-C_2[15]) * P_c[1] # e2 ^ (einf ^ e0)
	Q_2[31] = (-(C_2[30] * PI_c[1] + (-C_2[29]) * P_c[1])) # e1 ^ (e2 ^ (e3 ^ (einf ^ e0)))
	macro_ExtractFirstPoint_dPP3 = np.zeros(32)
	macro_ExtractFirstPoint_dPP3[10] = (-Q_2[21]) # e2 ^ e3
	macro_ExtractFirstPoint_dPP3[12] = (-Q_2[20]) # e2 ^ e0
	P_2 = np.zeros(32)
	P_2[1] = (Q_2[31] + math.sqrt(math.sqrt(abs(((-(Q_2[16] * Q_2[16])) + Q_2[17] * Q_2[18] + Q_2[18] * Q_2[17] + Q_2[19] * Q_2[20] + Q_2[20] * Q_2[19] + Q_2[21] * Q_2[21] + Q_2[22] * Q_2[23] + Q_2[23] * Q_2[22] + Q_2[24] * Q_2[24] + (-(Q_2[31] * Q_2[31]))) * ((-(Q_2[16] * Q_2[16])) + Q_2[17] * Q_2[18] + Q_2[18] * Q_2[17] + Q_2[19] * Q_2[20] + Q_2[20] * Q_2[19] + Q_2[21] * Q_2[21] + Q_2[22] * Q_2[23] + Q_2[23] * Q_2[22] + Q_2[24] * Q_2[24] + (-(Q_2[31] * Q_2[31]))) + (-(((-(Q_2[24] * Q_2[31])) + (-(Q_2[31] * Q_2[24]))) * (-((-(Q_2[24] * Q_2[31])) + (-(Q_2[31] * Q_2[24])))))) + (Q_2[22] * Q_2[31] + Q_2[31] * Q_2[22]) * (-((-(Q_2[23] * Q_2[31])) + (-(Q_2[31] * Q_2[23])))) + ((-(Q_2[23] * Q_2[31])) + (-(Q_2[31] * Q_2[23]))) * (-(Q_2[22] * Q_2[31] + Q_2[31] * Q_2[22])) + (-((Q_2[21] * Q_2[31] + Q_2[31] * Q_2[21]) * (-(Q_2[21] * Q_2[31] + Q_2[31] * Q_2[21])))) + ((-(Q_2[19] * Q_2[31])) + (-(Q_2[31] * Q_2[19]))) * (-(Q_2[20] * Q_2[31] + Q_2[31] * Q_2[20])) + (Q_2[20] * Q_2[31] + Q_2[31] * Q_2[20]) * (-((-(Q_2[19] * Q_2[31])) + (-(Q_2[31] * Q_2[19])))) + (Q_2[17] * Q_2[31] + Q_2[31] * Q_2[17]) * (-((-(Q_2[18] * Q_2[31])) + (-(Q_2[31] * Q_2[18])))) + ((-(Q_2[18] * Q_2[31])) + (-(Q_2[31] * Q_2[18]))) * (-(Q_2[17] * Q_2[31] + Q_2[31] * Q_2[17])) + ((-(Q_2[16] * Q_2[31])) + (-(Q_2[31] * Q_2[16]))) * (-((-(Q_2[16] * Q_2[31])) + (-(Q_2[31] * Q_2[16])))))))) * Q_2[23] / (Q_2[23] * Q_2[23] + macro_ExtractFirstPoint_dPP3[12] * macro_ExtractFirstPoint_dPP3[12] + Q_2[18] * Q_2[18]) + Q_2[24] * Q_2[18] / (Q_2[23] * Q_2[23] + macro_ExtractFirstPoint_dPP3[12] * macro_ExtractFirstPoint_dPP3[12] + Q_2[18] * Q_2[18]) + (-(Q_2[23] * Q_2[16] / (Q_2[23] * Q_2[23] + macro_ExtractFirstPoint_dPP3[12] * macro_ExtractFirstPoint_dPP3[12] + Q_2[18] * Q_2[18]))) # e1
	P_2[2] = (Q_2[31] + math.sqrt(math.sqrt(abs(((-(Q_2[16] * Q_2[16])) + Q_2[17] * Q_2[18] + Q_2[18] * Q_2[17] + Q_2[19] * Q_2[20] + Q_2[20] * Q_2[19] + Q_2[21] * Q_2[21] + Q_2[22] * Q_2[23] + Q_2[23] * Q_2[22] + Q_2[24] * Q_2[24] + (-(Q_2[31] * Q_2[31]))) * ((-(Q_2[16] * Q_2[16])) + Q_2[17] * Q_2[18] + Q_2[18] * Q_2[17] + Q_2[19] * Q_2[20] + Q_2[20] * Q_2[19] + Q_2[21] * Q_2[21] + Q_2[22] * Q_2[23] + Q_2[23] * Q_2[22] + Q_2[24] * Q_2[24] + (-(Q_2[31] * Q_2[31]))) + (-(((-(Q_2[24] * Q_2[31])) + (-(Q_2[31] * Q_2[24]))) * (-((-(Q_2[24] * Q_2[31])) + (-(Q_2[31] * Q_2[24])))))) + (Q_2[22] * Q_2[31] + Q_2[31] * Q_2[22]) * (-((-(Q_2[23] * Q_2[31])) + (-(Q_2[31] * Q_2[23])))) + ((-(Q_2[23] * Q_2[31])) + (-(Q_2[31] * Q_2[23]))) * (-(Q_2[22] * Q_2[31] + Q_2[31] * Q_2[22])) + (-((Q_2[21] * Q_2[31] + Q_2[31] * Q_2[21]) * (-(Q_2[21] * Q_2[31] + Q_2[31] * Q_2[21])))) + ((-(Q_2[19] * Q_2[31])) + (-(Q_2[31] * Q_2[19]))) * (-(Q_2[20] * Q_2[31] + Q_2[31] * Q_2[20])) + (Q_2[20] * Q_2[31] + Q_2[31] * Q_2[20]) * (-((-(Q_2[19] * Q_2[31])) + (-(Q_2[31] * Q_2[19])))) + (Q_2[17] * Q_2[31] + Q_2[31] * Q_2[17]) * (-((-(Q_2[18] * Q_2[31])) + (-(Q_2[31] * Q_2[18])))) + ((-(Q_2[18] * Q_2[31])) + (-(Q_2[31] * Q_2[18]))) * (-(Q_2[17] * Q_2[31] + Q_2[31] * Q_2[17])) + ((-(Q_2[16] * Q_2[31])) + (-(Q_2[31] * Q_2[16]))) * (-((-(Q_2[16] * Q_2[31])) + (-(Q_2[31] * Q_2[16])))))))) * macro_ExtractFirstPoint_dPP3[12] / (Q_2[23] * Q_2[23] + macro_ExtractFirstPoint_dPP3[12] * macro_ExtractFirstPoint_dPP3[12] + Q_2[18] * Q_2[18]) + macro_ExtractFirstPoint_dPP3[10] * Q_2[18] / (Q_2[23] * Q_2[23] + macro_ExtractFirstPoint_dPP3[12] * macro_ExtractFirstPoint_dPP3[12] + Q_2[18] * Q_2[18]) + (-(macro_ExtractFirstPoint_dPP3[12] * Q_2[16] / (Q_2[23] * Q_2[23] + macro_ExtractFirstPoint_dPP3[12] * macro_ExtractFirstPoint_dPP3[12] + Q_2[18] * Q_2[18]))) # e2
	P_2[3] = (Q_2[31] + math.sqrt(math.sqrt(abs(((-(Q_2[16] * Q_2[16])) + Q_2[17] * Q_2[18] + Q_2[18] * Q_2[17] + Q_2[19] * Q_2[20] + Q_2[20] * Q_2[19] + Q_2[21] * Q_2[21] + Q_2[22] * Q_2[23] + Q_2[23] * Q_2[22] + Q_2[24] * Q_2[24] + (-(Q_2[31] * Q_2[31]))) * ((-(Q_2[16] * Q_2[16])) + Q_2[17] * Q_2[18] + Q_2[18] * Q_2[17] + Q_2[19] * Q_2[20] + Q_2[20] * Q_2[19] + Q_2[21] * Q_2[21] + Q_2[22] * Q_2[23] + Q_2[23] * Q_2[22] + Q_2[24] * Q_2[24] + (-(Q_2[31] * Q_2[31]))) + (-(((-(Q_2[24] * Q_2[31])) + (-(Q_2[31] * Q_2[24]))) * (-((-(Q_2[24] * Q_2[31])) + (-(Q_2[31] * Q_2[24])))))) + (Q_2[22] * Q_2[31] + Q_2[31] * Q_2[22]) * (-((-(Q_2[23] * Q_2[31])) + (-(Q_2[31] * Q_2[23])))) + ((-(Q_2[23] * Q_2[31])) + (-(Q_2[31] * Q_2[23]))) * (-(Q_2[22] * Q_2[31] + Q_2[31] * Q_2[22])) + (-((Q_2[21] * Q_2[31] + Q_2[31] * Q_2[21]) * (-(Q_2[21] * Q_2[31] + Q_2[31] * Q_2[21])))) + ((-(Q_2[19] * Q_2[31])) + (-(Q_2[31] * Q_2[19]))) * (-(Q_2[20] * Q_2[31] + Q_2[31] * Q_2[20])) + (Q_2[20] * Q_2[31] + Q_2[31] * Q_2[20]) * (-((-(Q_2[19] * Q_2[31])) + (-(Q_2[31] * Q_2[19])))) + (Q_2[17] * Q_2[31] + Q_2[31] * Q_2[17]) * (-((-(Q_2[18] * Q_2[31])) + (-(Q_2[31] * Q_2[18])))) + ((-(Q_2[18] * Q_2[31])) + (-(Q_2[31] * Q_2[18]))) * (-(Q_2[17] * Q_2[31] + Q_2[31] * Q_2[17])) + ((-(Q_2[16] * Q_2[31])) + (-(Q_2[31] * Q_2[16]))) * (-((-(Q_2[16] * Q_2[31])) + (-(Q_2[31] * Q_2[16])))))))) * Q_2[18] / (Q_2[23] * Q_2[23] + macro_ExtractFirstPoint_dPP3[12] * macro_ExtractFirstPoint_dPP3[12] + Q_2[18] * Q_2[18]) + (-(Q_2[24] * Q_2[23] / (Q_2[23] * Q_2[23] + macro_ExtractFirstPoint_dPP3[12] * macro_ExtractFirstPoint_dPP3[12] + Q_2[18] * Q_2[18]))) + (-(macro_ExtractFirstPoint_dPP3[10] * macro_ExtractFirstPoint_dPP3[12] / (Q_2[23] * Q_2[23] + macro_ExtractFirstPoint_dPP3[12] * macro_ExtractFirstPoint_dPP3[12] + Q_2[18] * Q_2[18]))) + (-(Q_2[18] * Q_2[16] / (Q_2[23] * Q_2[23] + macro_ExtractFirstPoint_dPP3[12] * macro_ExtractFirstPoint_dPP3[12] + Q_2[18] * Q_2[18]))) # e3
	P_2[5] = (-(Q_2[23] * Q_2[23] / (Q_2[23] * Q_2[23] + macro_ExtractFirstPoint_dPP3[12] * macro_ExtractFirstPoint_dPP3[12] + Q_2[18] * Q_2[18]))) + (-(macro_ExtractFirstPoint_dPP3[12] * macro_ExtractFirstPoint_dPP3[12] / (Q_2[23] * Q_2[23] + macro_ExtractFirstPoint_dPP3[12] * macro_ExtractFirstPoint_dPP3[12] + Q_2[18] * Q_2[18]))) + (-(Q_2[18] * Q_2[18] / (Q_2[23] * Q_2[23] + macro_ExtractFirstPoint_dPP3[12] * macro_ExtractFirstPoint_dPP3[12] + Q_2[18] * Q_2[18]))) # e0
	P_2[16] = (-(Q_2[24] * macro_ExtractFirstPoint_dPP3[12] / (Q_2[23] * Q_2[23] + macro_ExtractFirstPoint_dPP3[12] * macro_ExtractFirstPoint_dPP3[12] + Q_2[18] * Q_2[18]))) + macro_ExtractFirstPoint_dPP3[10] * Q_2[23] / (Q_2[23] * Q_2[23] + macro_ExtractFirstPoint_dPP3[12] * macro_ExtractFirstPoint_dPP3[12] + Q_2[18] * Q_2[18]) # e1 ^ (e2 ^ e3)
	P_2[18] = (-(Q_2[23] * macro_ExtractFirstPoint_dPP3[12] / (Q_2[23] * Q_2[23] + macro_ExtractFirstPoint_dPP3[12] * macro_ExtractFirstPoint_dPP3[12] + Q_2[18] * Q_2[18]))) + macro_ExtractFirstPoint_dPP3[12] * Q_2[23] / (Q_2[23] * Q_2[23] + macro_ExtractFirstPoint_dPP3[12] * macro_ExtractFirstPoint_dPP3[12] + Q_2[18] * Q_2[18]) # e1 ^ (e2 ^ e0)
	P_2[20] = (-(Q_2[23] * Q_2[18] / (Q_2[23] * Q_2[23] + macro_ExtractFirstPoint_dPP3[12] * macro_ExtractFirstPoint_dPP3[12] + Q_2[18] * Q_2[18]))) + Q_2[18] * Q_2[23] / (Q_2[23] * Q_2[23] + macro_ExtractFirstPoint_dPP3[12] * macro_ExtractFirstPoint_dPP3[12] + Q_2[18] * Q_2[18]) # e1 ^ (e3 ^ e0)
	P_2[23] = (-(macro_ExtractFirstPoint_dPP3[12] * Q_2[18] / (Q_2[23] * Q_2[23] + macro_ExtractFirstPoint_dPP3[12] * macro_ExtractFirstPoint_dPP3[12] + Q_2[18] * Q_2[18]))) + Q_2[18] * macro_ExtractFirstPoint_dPP3[12] / (Q_2[23] * Q_2[23] + macro_ExtractFirstPoint_dPP3[12] * macro_ExtractFirstPoint_dPP3[12] + Q_2[18] * Q_2[18]) # e2 ^ (e3 ^ e0)
	L_12 = np.zeros(32)
	L_12[0] = (-(-0.1625 * P_2[18] + (-P_2[16]))) # 1.0
	L_12[6] = -0.1625 * P_2[5] + (-P_2[3]) # e1 ^ e2
	L_12[10] = (-P_2[1]) # e2 ^ e3
	L_23 = np.zeros(32)
	L_23[0] = (-(P_2[3] * P_3[18] + (-(P_2[5] * P_3[16])) + P_2[16] * P_3[5] + (-(P_2[18] * P_3[3])) + P_2[20] * P_3[2] + (-(P_2[23] * P_3[1])))) # 1.0
	L_23[6] = P_2[3] * P_3[5] + (-(P_2[5] * P_3[3])) # e1 ^ e2
	L_23[7] = (-(P_2[2] * P_3[5] + (-(P_2[5] * P_3[2])))) # e1 ^ e3
	L_23[10] = P_2[1] * P_3[5] + (-(P_2[5] * P_3[1])) # e2 ^ e3
	b_1 = np.zeros(32)
	b_1[1] = (-PI_c[1]) # e1
	b_1[2] = (-P_c[1]) # e2
	x1 = np.zeros(32)
	x1[0] = (-b_1[1]) # 1.0
	y1 = np.zeros(32)
	y1[0] = b_1[2] # 1.0
	b_2 = np.zeros(32)
	b_2[1] = (-L_12[10]) # e1
	b_2[3] = (-L_12[6]) # e3
	N_2 = np.zeros(32)
	N_2[10] = (-PI_c[1]) # e2 ^ e3
	x2 = np.zeros(32)
	x2[0] = (-(b_2[1] * (-P_c[1]) / ((-(P_c[1] * (-P_c[1]))) + (-(N_2[10] * (-N_2[10])))))) + (-(P_2[2] * (-N_2[10]) / ((-(P_c[1] * (-P_c[1]))) + (-(N_2[10] * (-N_2[10])))))) # 1.0
	x2[6] = (-(b_2[1] * (-N_2[10]) / ((-(P_c[1] * (-P_c[1]))) + (-(N_2[10] * (-N_2[10])))))) + P_2[2] * (-P_c[1]) / ((-(P_c[1] * (-P_c[1]))) + (-(N_2[10] * (-N_2[10])))) # e1 ^ e2
	y2 = np.zeros(32)
	y2[0] = (-b_2[3]) # 1.0
	y2[6] = (-L_12[0]) # e1 ^ e2
	a_3 = np.zeros(32)
	a_3[1] = (-L_12[10]) # e1
	a_3[3] = (-L_12[6]) # e3
	b_3 = np.zeros(32)
	b_3[1] = (-L_23[10]) # e1
	b_3[3] = (-L_23[6]) # e3
	N_3 = np.zeros(32)
	N_3[10] = (-PI_c[1]) # e2 ^ e3
	x3 = np.zeros(32)
	x3[0] = (-((a_3[1] * b_3[3] + (-(a_3[3] * b_3[1]))) * (-P_c[1]) / ((-(P_c[1] * (-P_c[1]))) + (-(N_3[10] * (-N_3[10])))))) + (-((P_2[2] * b_3[3] + (-(a_3[3] * L_23[7]))) * (-N_3[10]) / ((-(P_c[1] * (-P_c[1]))) + (-(N_3[10] * (-N_3[10])))))) # 1.0
	x3[6] = (-((a_3[1] * b_3[3] + (-(a_3[3] * b_3[1]))) * (-N_3[10]) / ((-(P_c[1] * (-P_c[1]))) + (-(N_3[10] * (-N_3[10])))))) + (P_2[2] * b_3[3] + (-(a_3[3] * L_23[7]))) * (-P_c[1]) / ((-(P_c[1] * (-P_c[1]))) + (-(N_3[10] * (-N_3[10])))) # e1 ^ e2
	x3[7] = (a_3[1] * L_23[7] + (-(P_2[2] * b_3[1]))) * (-N_3[10]) / ((-(P_c[1] * (-P_c[1]))) + (-(N_3[10] * (-N_3[10])))) # e1 ^ e3
	x3[10] = (-((a_3[1] * L_23[7] + (-(P_2[2] * b_3[1]))) * (-P_c[1]) / ((-(P_c[1] * (-P_c[1]))) + (-(N_3[10] * (-N_3[10])))))) # e2 ^ e3
	y3 = np.zeros(32)
	y3[0] = a_3[1] * b_3[1] + P_2[2] * L_23[7] + a_3[3] * b_3[3] + (-(L_12[0] * L_23[0])) # 1.0
	y3[6] = a_3[3] * L_23[0] + L_12[0] * b_3[3] # e1 ^ e2
	y3[7] = (-(P_2[2] * L_23[0])) + (-(L_12[0] * L_23[7])) # e1 ^ e3
	y3[10] = a_3[1] * L_23[0] + L_12[0] * b_3[1] # e2 ^ e3
	a_4 = np.zeros(32)
	a_4[1] = (-L_23[10]) # e1
	a_4[3] = (-L_23[6]) # e3
	b_4 = np.zeros(32)
	b_4[1] = (-L_45[10]) # e1
	b_4[3] = (-L_45[6]) # e3
	N_4 = np.zeros(32)
	N_4[10] = (-PI_c[1]) # e2 ^ e3
	x4 = np.zeros(32)
	x4[0] = (-((a_4[1] * b_4[3] + (-(a_4[3] * b_4[1]))) * (-P_c[1]) / ((-(P_c[1] * (-P_c[1]))) + (-(N_4[10] * (-N_4[10])))))) + (-((L_23[7] * b_4[3] + (-(a_4[3] * L_45[7]))) * (-N_4[10]) / ((-(P_c[1] * (-P_c[1]))) + (-(N_4[10] * (-N_4[10])))))) # 1.0
	x4[6] = (-((a_4[1] * b_4[3] + (-(a_4[3] * b_4[1]))) * (-N_4[10]) / ((-(P_c[1] * (-P_c[1]))) + (-(N_4[10] * (-N_4[10])))))) + (L_23[7] * b_4[3] + (-(a_4[3] * L_45[7]))) * (-P_c[1]) / ((-(P_c[1] * (-P_c[1]))) + (-(N_4[10] * (-N_4[10])))) # e1 ^ e2
	x4[7] = (a_4[1] * L_45[7] + (-(L_23[7] * b_4[1]))) * (-N_4[10]) / ((-(P_c[1] * (-P_c[1]))) + (-(N_4[10] * (-N_4[10])))) # e1 ^ e3
	x4[10] = (-((a_4[1] * L_45[7] + (-(L_23[7] * b_4[1]))) * (-P_c[1]) / ((-(P_c[1] * (-P_c[1]))) + (-(N_4[10] * (-N_4[10])))))) # e2 ^ e3
	y4 = np.zeros(32)
	y4[0] = a_4[1] * b_4[1] + L_23[7] * L_45[7] + a_4[3] * b_4[3] # 1.0
	y4[6] = L_23[0] * b_4[3] # e1 ^ e2
	y4[7] = (-(L_23[0] * L_45[7])) # e1 ^ e3
	y4[10] = L_23[0] * b_4[1] # e2 ^ e3
	N_5 = np.zeros(32)
	N_5[6] = (-L_45[6]) # e1 ^ e2
	N_5[7] = (-L_45[7]) # e1 ^ e3
	N_5[8] = (-L_45[8]) # e1 ^ einf
	N_5[10] = (-L_45[10]) # e2 ^ e3
	N_5[11] = (-L_45[11]) # e2 ^ einf
	N_5[13] = (-L_45[13]) # e3 ^ einf
	x5 = np.zeros(32)
	x5[0] = (-(P_c[1] * (-N_5[7]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))))) + (-(P_c[2] * (-N_5[10]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))))) + (-P_c[5]) * (-N_5[13]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))) # 1.0
	x5[6] = (-(P_c[1] * (-N_5[10]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))))) + P_c[2] * (-N_5[7]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))) + (-P_c[18]) * (-N_5[13]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))) # e1 ^ e2
	x5[7] = (-(P_c[2] * (-N_5[6]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))))) + (-((-P_c[5]) * (-N_5[8]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))))) + (-((-P_c[18]) * (-N_5[11]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))))) # e1 ^ e3
	x5[8] = P_c[1] * (-N_5[13]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))) + (-((-P_c[4]) * (-N_5[7]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))))) + (-((-P_c[17]) * (-N_5[10]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))))) # e1 ^ einf
	x5[9] = (-((-P_c[5]) * (-N_5[7]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))))) + (-((-P_c[18]) * (-N_5[10]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))))) # e1 ^ e0
	x5[10] = P_c[1] * (-N_5[6]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))) + (-((-P_c[5]) * (-N_5[11]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))))) + (-P_c[18]) * (-N_5[8]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))) # e2 ^ e3
	x5[11] = P_c[2] * (-N_5[13]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))) + (-((-P_c[4]) * (-N_5[10]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))))) + (-P_c[17]) * (-N_5[7]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))) # e2 ^ einf
	x5[12] = (-((-P_c[5]) * (-N_5[10]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))))) + (-P_c[18]) * (-N_5[7]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))) # e2 ^ e0
	x5[13] = (-(P_c[1] * (-N_5[8]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))))) + (-(P_c[2] * (-N_5[11]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))))) + (-((-P_c[17]) * (-N_5[6]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))))) # e3 ^ einf
	x5[14] = (-((-P_c[18]) * (-N_5[6]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))))) # e3 ^ e0
	x5[15] = (-P_c[5]) * (-N_5[13]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))) # einf ^ e0
	x5[26] = (-(P_c[1] * (-N_5[11]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))))) + P_c[2] * (-N_5[8]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))) + (-P_c[4]) * (-N_5[6]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))) # e1 ^ (e2 ^ (e3 ^ einf))
	x5[27] = (-P_c[5]) * (-N_5[6]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))) # e1 ^ (e2 ^ (e3 ^ e0))
	x5[28] = (-P_c[18]) * (-N_5[13]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))) # e1 ^ (e2 ^ (einf ^ e0))
	x5[29] = (-((-P_c[5]) * (-N_5[8]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))))) + (-((-P_c[18]) * (-N_5[11]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))))) # e1 ^ (e3 ^ (einf ^ e0))
	x5[30] = (-((-P_c[5]) * (-N_5[11]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))))) + (-P_c[18]) * (-N_5[8]) / ((-(N_5[6] * (-N_5[6]))) + (-(N_5[7] * (-N_5[7]))) + (-(N_5[10] * (-N_5[10])))) # e2 ^ (e3 ^ (einf ^ e0))
	y5 = np.zeros(32)
	y5[0] = P_c[3] # 1.0
	y5[6] = P_c[16] # e1 ^ e2
	a_6 = np.zeros(32)
	a_6[1] = (-L_45[10]) # e1
	a_6[3] = (-L_45[6]) # e3
	x6 = np.zeros(32)
	x6[0] = a_6[1] # 1.0
	x6[7] = (-a_6[3]) # e1 ^ e3
	y6 = np.zeros(32)
	y6[0] = (-L_45[7]) # 1.0
	return x1[0], x2[0], x3[0], x4[0], x5[0], x6[0], y1[0], y2[0], y3[0], y4[0], y5[0], y6[0]

def calculate_angles(x, y):
	theta1 = np.arctan2(x[0], y[0])
	theta2 = np.arctan2(x[1] - (np.pi / 2), y[1])
	theta3 = np.arctan2(x[2], y[2])
	theta4 = np.arctan2(x[3] - (np.pi / 2), y[3])
	theta5 = np.arctan2(x[4], y[4])
	theta6 = np.arctan2(x[5], y[5])
	return theta1, theta2, theta3, theta4, theta5, theta6

with open('poses.txt', 'r') as read_obj:
	
	csv_reader = reader(read_obj)

	for row in csv_reader:
		x = np.zeros(6)
		y = np.zeros(6)
		x[0], x[1], x[2], x[3], x[4], x[5], y[0], y[1], y[2], y[3], y[4], y[5] = inverse_kinematics_ur5e(float(row[3]), float(row[4]), float(row[5]))

		theta1, theta2, theta3, theta4, theta5, theta6 = calculate_angles(x, y)
		print(theta1, theta2, theta3, theta4, theta5, theta6)
